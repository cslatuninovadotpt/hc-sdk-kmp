/*
 * Copyright (c) 2020 D4L data4life gGmbH / All rights reserved.
 *
 * D4L owns all legal rights, title and interest in and to the Software Development Kit ("SDK"),
 * including any intellectual property rights that subsist in the SDK.
 *
 * The SDK and its documentation may be accessed and used for viewing/review purposes only.
 * Any usage of the SDK for other purposes, including usage for the development of
 * applications/third-party applications shall require the conclusion of a license agreement
 * between you and D4L.
 *
 * If you are interested in licensing the SDK for your own applications/third-party
 * applications and/or if youâ€™d like to contribute to the development of the SDK, please
 * contact D4L by email to help@data4life.care.
 */

apply plugin: 'de.undercouch.download'

def token = System.getenv('GITHUB_TOKEN')

ext.downloadFromGitHub = { path ->
    def response
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable "/bin/sh"
            args "-c", "curl -s -H \"Authorization: token $token\" https://api.github.com/repos/gesundheitscloud/dev-docs/contents/$path"
            standardOutput = os
        }
        response = os.toString()
    }

    return response
}

ext.downloadFileFromGitHub = { path, url ->
    download {
        src url
        dest "$projectDir/src/androidTest/assets/$path"
        quiet true
    }
}

task downloadCryptoTestFixtures() {
    doLast {
        def response = downloadFromGitHub("design-documents/crypto/test-fixture")
        def json = new groovy.json.JsonSlurper().parseText(response)

        def dirs = []
        json.each {
            if (it.type == "dir") {
                dirs << it.path
            }
        }

        dirs.each {
            def dirResponse = downloadFromGitHub(it)
            def dirJson = new groovy.json.JsonSlurper().parseText(dirResponse)

            dirJson.each {
                if (it.download_url != null) {
                    println "Downloading $it.path"
                    downloadFileFromGitHub(it.path, it.download_url)
                }
            }
        }
    }
}

task downloadDataModelExamples() {
    doLast {
        def response = downloadFromGitHub("gc-fhir-examples")
        def json = new groovy.json.JsonSlurper().parseText(response)

        def dirs = []
        json.each {
            if (it.type == "dir") {
                dirs << it.path
            }
        }

        dirs.each {
            def dirResponse = downloadFromGitHub(it)
            def dirJson = new groovy.json.JsonSlurper().parseText(dirResponse)

            dirJson.each {
                if (it.type == "dir") {
                    def nestedResponse = downloadFromGitHub(it.path)
                    def nestedJson = new groovy.json.JsonSlurper().parseText(nestedResponse)

                    nestedJson.each {
                        if (it.download_url != null) {
                            println "Downloading $it.path/$it.name"
                            downloadFileFromGitHub(it.path, it.download_url)
                        }
                    }
                } else if (it.download_url != null) {
                    downloadFileFromGitHub(it.path, it.download_url)
                }
            }
        }
    }
}
